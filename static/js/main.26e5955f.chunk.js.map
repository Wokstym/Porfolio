{"version":3,"sources":["res/landscape.jpg","res/gotowaniev1.PNG","res/social/github.webp","res/social/linkedin.svg","res/social/mail.png","App.js","serviceWorker.js","index.js","res/bootstrapIT.PNG"],"names":["module","exports","websites1","link","img","require","title","body","avatarSize","window","innerWidth","InfoCard","this","props","websites","map","website","href","style","textDecoration","className","Card","border","Img","variant","src","Body","Title","Text","React","Component","App","bgImage","land","strength","githubHandle","size","round","Row","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,uC,sGCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,yMCWrCC,EAAY,CAAC,CACfC,KAAM,4DACNC,IAAKC,EAAQ,KACbC,MAAO,qBACPC,KAAM,kGAER,CACEJ,KAAM,4DACNC,IAAKC,EAAQ,IACbC,MAAO,YACPC,KAAM,kGAER,CACEJ,KAAM,4DACNC,IAAKC,EAAQ,IACbC,MAAO,YACPC,KAAM,kGAER,CACEJ,KAAM,4DACNC,IAAKC,EAAQ,IACbC,MAAO,YACPC,KAAM,kGAER,CACEJ,KAAM,4DACNC,IAAKC,EAAQ,IACbC,MAAO,YACPC,KAAM,mGAKNC,EADQC,OAAOC,WACK,IAAM,IAAM,IAY9BC,E,iLAEF,OAAQC,KAAKC,MAAMC,SAASC,KAAI,SAAUC,GACxC,OACE,uBAAGC,KAAMD,EAAQb,KAAMe,MAAO,CAAEC,eAAgB,QAAUC,UAAU,eAChE,kBAACC,EAAA,EAAD,CAAMC,OAAO,QAAQF,UAAU,QACzB,kBAACC,EAAA,EAAKE,IAAN,CAAUH,UAAU,MAAMI,QAAQ,MAAMC,IAAKT,EAAQZ,MACvD,kBAACiB,EAAA,EAAKK,KAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,KAAaX,EAAQV,OACrB,kBAACe,EAAA,EAAKO,KAAN,KAAYZ,EAAQT,gB,GATjBsB,IAAMC,WAgDdC,MA7Bf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,WAAD,CAAUY,QAASC,IAAMC,SAAU,KACjC,yBAAKd,UAAU,QACb,kBAAC,IAAD,CAAQA,UAAU,SAASe,aAAa,UAAUC,KAAM5B,EAAY6B,OAAO,IAC3E,yBAAKjB,UAAU,cAAf,wBACA,yBAAKA,UAAU,QACb,yDACA,2EAEF,yBAAKA,UAAU,SACf,uBAAGH,KAAK,8BACN,yBAAMQ,IAAKpB,EAAQ,QACf,uBAAGY,KAAK,+CACZ,yBAAKQ,IAAKpB,EAAQ,QACd,uBAAGY,KAAK,uCACZ,yBAAKQ,IAAKpB,EAAQ,WAKxB,kBAACiC,EAAA,EAAD,CAAKlB,UAAU,mCACb,kBAAC,EAAD,CAAUN,SAAUZ,OCtFRqC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BxD,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.26e5955f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/landscape.085a5a9b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gotowaniev1.6ec73184.PNG\";","module.exports = __webpack_public_path__ + \"static/media/github.5d563f42.webp\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.4f2bc978.svg\";","module.exports = __webpack_public_path__ + \"static/media/mail.8ac3b5d4.png\";","import React from 'react';\nimport land from './res/landscape.jpg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button'\nimport {Parallax} from \"react-parallax\";\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Avatar from 'react-avatar';\n\n\nconst websites1 = [{\n    link: 'https://wokstym.github.io/IntrToWebAplic/Task1/index.html',\n    img: require('./res/gotowaniev1.PNG'),\n    title: 'Strona o gotowaniu',\n    body: 'Some quick example text to build on the card title and make up the bulk of the card\\'s content.'\n  },\n  {\n    link: 'https://wokstym.github.io/IntrToWebAplic/Task2/index.html',\n    img: require('./res/bootstrapIT.PNG'),\n    title: 'Strona IT',\n    body: 'Some quick example text to build on the card title and make up the bulk of the card\\'s content.'\n  },\n  {\n    link: 'https://wokstym.github.io/IntrToWebAplic/Task2/index.html',\n    img: require('./res/bootstrapIT.PNG'),\n    title: 'Strona IT',\n    body: 'Some quick example text to build on the card title and make up the bulk of the card\\'s content.'\n  },\n  {\n    link: 'https://wokstym.github.io/IntrToWebAplic/Task2/index.html',\n    img: require('./res/bootstrapIT.PNG'),\n    title: 'Strona IT',\n    body: 'Some quick example text to build on the card title and make up the bulk of the card\\'s content.'\n  },\n  {\n    link: 'https://wokstym.github.io/IntrToWebAplic/Task2/index.html',\n    img: require('./res/bootstrapIT.PNG'),\n    title: 'Strona IT',\n    body: 'Some quick example text to build on the card title and make up the bulk of the card\\'s content.'\n  }\n];\n\nlet width = window.innerWidth;\nlet avatarSize = width> 770 ? 250 : 150;\n\nconst insideStyles = {\n  background: \"black\",\n  color: \"white\",\n  padding: 20,\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%,-50%)\",\n};\n\nclass InfoCard extends React.Component {\n  render() {\n    return  this.props.websites.map(function (website) {\n      return (\n        <a href={website.link} style={{ textDecoration: 'none' }} className=\"cardWrapper\">\n            <Card border=\"light\" className=\"card\">\n                  <Card.Img className=\"top\" variant=\"top\" src={website.img} />\n                <Card.Body>\n                    <Card.Title>{website.title}</Card.Title>\n                    <Card.Text>{website.body}</Card.Text>\n                </Card.Body>\n            </Card>\n        </a>\n      );\n    });   \n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Parallax bgImage={land} strength={1000}>\n        <div className='name'>\n          <Avatar className=\"avatar\" githubHandle=\"wokstym\" size={avatarSize} round={true} />\n          <div className=\"insideName\">Grzegorz PorÄ™ba</div>\n          <div className=\"desc\">\n            <div >Computer Science Student</div> \n            <div > AGH University of Science and Technology</div>\n          </div>\n          <div className=\"logos\">\n          <a href='https://github.com/Wokstym' >\n            <img  src={require('./res/social/github.webp')}/>  \n            </a><a href='https://www.linkedin.com/in/porebagrzegorz/' >          \n            <img src={require('./res/social/linkedin.svg')}/>\n            </a><a href='mailto:grzegorz.poreba.73@gmail.com' >\n            <img src={require('./res/social/mail.png')}/>\n            </a>\n          </div>\n        </div>\n      </Parallax>\n      <Row className=\"justify-content-md-center cards\">\n        <InfoCard websites={websites1}/>\n      </Row>\n    </div>  \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bootstrapIT.14e6fd06.PNG\";"],"sourceRoot":""}